{"version":3,"sources":["who-wins.png","gh.svg","App.js","reportWebVitals.js","index.js"],"names":["list","rarities","App","useState","count","setCount","result","setResult","rarityLevel","winner","useEffect","randomiser","setInterval","compendium","concat","randomisedItem","Math","floor","random","length","setTimeout","tier","pow","item","rarityRandom","clearInterval","buttonText","className","href","src","Github","WhoWins","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAAe,MAA0B,qCCA1B,MAA0B,+B,eCyBnCA,EAAO,CAjBE,CACb,iCACA,mDACA,uCACA,yDACA,2BACA,iCACA,uFACA,uCACA,6CACA,oDAEW,CAAC,qEAAe,iBACX,CAAC,+EAAoB,4HACrB,CAAC,0DACF,CAAC,6CAAW,iCAAS,qBAAO,uBAGvCC,EAAW,CAAC,SAAU,OAAQ,YAAa,YAAa,YAyD/CC,MAvDf,WACE,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEA,cAA8BD,EAA9B,GAAOE,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACR,IAAMC,EAAaC,aAAY,WAAO,IAAD,EAC7BC,GAAa,MAAGC,OAAH,QAAad,GAC1Be,EACJF,EAAWG,KAAKC,MAAMD,KAAKE,SAAWL,EAAWM,SACnDZ,EAAU,CAAC,KAAMQ,MAChB,IAEHK,YAAW,WACTb,GAAU,kBAkChB,WACE,IAAMc,EAAOL,KAAKC,MAAMD,KAAKM,IAAIN,KAAKE,SAxErB,GAwE6ClB,EAAKmB,QAC7DI,EAAOP,KAAKC,MAAMD,KAAKE,SAAWlB,EAAKqB,GAAMF,QACnD,MAAO,CAACE,EAAMrB,EAAKqB,GAAME,IArCLC,MAChBC,cAAcd,KACb,OACF,CAACP,IAMJ,IAAMsB,EACJlB,GAAeR,EAAKmB,OAAS,EAAI,uDAAiB,2EAEpD,OACE,sBAAKQ,UAAU,MAAf,UACE,mBAAGC,KAAK,4CAAR,SACE,qBAAKD,UAAU,SAASE,IAAKC,MAE/B,qBAAKH,UAAU,UAAUE,IAAKE,IAC9B,sBAAKJ,UAAU,SAAf,UACE,sBAAMA,UAAU,eAAhB,SAAgClB,IAChC,sBAAMkB,UAAU,aAAhB,mCAEe,OAAhBnB,GACC,sBAAKmB,UAAU,SAAf,cAA0B1B,EAASO,GAAnC,OAEe,OAAhBA,GACC,wBAAQmB,UAAU,YAAYK,QArBpC,WACE3B,EAASD,EAAQ,IAoBb,SACGsB,QC1DIO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2bf27e86.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/who-wins.4686e458.png\";","export default __webpack_public_path__ + \"static/media/gh.cf53c202.svg\";","import React, { useState, useEffect } from \"react\";\nimport WhoWins from \"./who-wins.png\";\nimport Github from \"./gh.svg\";\n\nimport \"./App.css\";\n\nconst difficulty = 4;\n\nconst common = [\n  \"โควิด\",\n  \"ไม่มีใคร\",\n  \"รัฐบาล\",\n  \"ข้าราชการ\",\n  \"ทหาร\",\n  \"ตำรวจ\",\n  \"เจ้าหน้าที่รัฐ\",\n  \"นายทุน\",\n  \"เจ้าสัว\",\n  \"ฝันไปว่า\",\n];\nconst rare = [\"ธุรกิจขนส่ง\", \"Food Delivery\"];\nconst ultraRare = [\"ผู้ประกอบการ SME\", \"เจ้าของธุรกิจรายย่อย\"];\nconst legendary = [\"ร้านอาหาร\"];\nconst mythical = [\"ประชาชน\", \"คนไทย\", \"คุณ\", \"เรา\"];\n\nconst list = [common, rare, ultraRare, legendary, mythical];\nconst rarities = [\"Common\", \"Rare\", \"Ultrarare\", \"Legendary\", \"Mythical\"];\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [result, setResult] = useState([]);\n\n  const [rarityLevel, winner] = result;\n\n  useEffect(() => {\n    const randomiser = setInterval(() => {\n      const compendium = [].concat(...list);\n      const randomisedItem =\n        compendium[Math.floor(Math.random() * compendium.length)];\n      setResult([null, randomisedItem]);\n    }, 60);\n\n    setTimeout(() => {\n      setResult(() => rarityRandom());\n      clearInterval(randomiser);\n    }, 1000);\n  }, [count]);\n\n  function forceUpdate() {\n    setCount(count + 1);\n  }\n\n  const buttonText =\n    rarityLevel >= list.length - 2 ? \"555 จะบ้าหรอ\" : \"หาผู้ชนะใหม่\";\n\n  return (\n    <div className=\"App\">\n      <a href=\"https://github.com/thammarith/who-wins-th\">\n        <img className=\"Github\" src={Github} />\n      </a>\n      <img className=\"AppLogo\" src={WhoWins} />\n      <div className=\"Winner\">\n        <span className=\"WinnerResult\">{winner}</span>\n        <span className=\"WinnerWins\">ชนะ</span>\n      </div>\n      {rarityLevel !== null && (\n        <div className=\"Rarity\">({rarities[rarityLevel]})</div>\n      )}\n      {rarityLevel !== null && (\n        <button className=\"NewWinner\" onClick={forceUpdate}>\n          {buttonText}\n        </button>\n      )}\n    </div>\n  );\n}\n\nfunction rarityRandom() {\n  const tier = Math.floor(Math.pow(Math.random(), difficulty) * list.length);\n  const item = Math.floor(Math.random() * list[tier].length);\n  return [tier, list[tier][item]];\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}